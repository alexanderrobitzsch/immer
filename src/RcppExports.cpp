//// File Name: RcppExports.cpp
//// File Version: 0.15
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// immer_ccml_proc_freq_item_pair
Rcpp::NumericMatrix immer_ccml_proc_freq_item_pair(Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int K, Rcpp::NumericVector weights, int ii, int jj);
RcppExport SEXP _immer_immer_ccml_proc_freq_item_pair(SEXP datSEXP, SEXP dat_respSEXP, SEXP KSEXP, SEXP weightsSEXP, SEXP iiSEXP, SEXP jjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< int >::type jj(jjSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_proc_freq_item_pair(dat, dat_resp, K, weights, ii, jj));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_proc_freq
Rcpp::NumericMatrix immer_ccml_proc_freq(Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int K, Rcpp::NumericVector weights);
RcppExport SEXP _immer_immer_ccml_proc_freq(SEXP datSEXP, SEXP dat_respSEXP, SEXP KSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_proc_freq(dat, dat_resp, K, weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_calc_item_intercepts
Rcpp::NumericMatrix immer_ccml_calc_item_intercepts(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par);
RcppExport SEXP _immer_immer_ccml_calc_item_intercepts(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_calc_item_intercepts(b_fixed, A_, par));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_probs
Rcpp::NumericVector immer_ccml_probs(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_probs(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_probs(b, ll_index1, item10, item20, cat1, cat2, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_probs_from_par
Rcpp::NumericVector immer_ccml_probs_from_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, int max_ll_index, int pp1, int pp2, double h1, double h2);
RcppExport SEXP _immer_immer_ccml_probs_from_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP max_ll_indexSEXP, SEXP pp1SEXP, SEXP pp2SEXP, SEXP h1SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    Rcpp::traits::input_parameter< int >::type pp1(pp1SEXP);
    Rcpp::traits::input_parameter< int >::type pp2(pp2SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_probs_from_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, max_ll_index, pp1, pp2, h1, h2));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_opt_function
double immer_ccml_opt_function(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_opt_function(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_opt_function(b, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_opt_function_par
double immer_ccml_opt_function_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_opt_function_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_opt_function_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_gradient
Rcpp::NumericMatrix immer_ccml_gradient(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_gradient(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_gradient(b, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_gradient_par
Rcpp::NumericVector immer_ccml_gradient_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_gradient_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_gradient_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_se
Rcpp::List immer_ccml_se(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index, double h);
RcppExport SEXP _immer_immer_ccml_se(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_se(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_pnorm
double immer_pnorm(double x);
RcppExport SEXP _immer_immer_pnorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_pnorm(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_signum
double immer_signum(double x);
RcppExport SEXP _immer_immer_signum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_signum(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_dnorm2
double immer_dnorm2(double a, double b, double rho);
RcppExport SEXP _immer_immer_dnorm2(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_dnorm2(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// immer_dnorm
double immer_dnorm(double a);
RcppExport SEXP _immer_immer_dnorm(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_dnorm(a));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_fct_f_cpp
double pbivnorm_drezner_fct_f_cpp(double x, double y, double ap, double bp, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_fct_f_cpp(SEXP xSEXP, SEXP ySEXP, SEXP apSEXP, SEXP bpSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type ap(apSEXP);
    Rcpp::traits::input_parameter< double >::type bp(bpSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_fct_f_cpp(x, y, ap, bp, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_all_negative_cpp
double pbivnorm_drezner_all_negative_cpp(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_all_negative_cpp(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_all_negative_cpp(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_product_negative_cpp
double pbivnorm_drezner_product_negative_cpp(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_product_negative_cpp(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_product_negative_cpp(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_product_positive_cpp
double pbivnorm_drezner_product_positive_cpp(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_product_positive_cpp(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_product_positive_cpp(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_numeric_arguments
double pbivnorm_drezner_numeric_arguments(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_numeric_arguments(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_numeric_arguments(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner
Rcpp::NumericVector pbivnorm_drezner(Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector rho);
RcppExport SEXP _immer_pbivnorm_drezner(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_derivative_rho_numeric
double pbivnorm_drezner_derivative_rho_numeric(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_derivative_rho_numeric(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_derivative_rho_numeric(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_derivative_a_numeric
double pbivnorm_drezner_derivative_a_numeric(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_derivative_a_numeric(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_derivative_a_numeric(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_derivative_b_numeric
double pbivnorm_drezner_derivative_b_numeric(double a, double b, double rho);
RcppExport SEXP _immer_pbivnorm_drezner_derivative_b_numeric(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_derivative_b_numeric(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pbivnorm_drezner_derivative
Rcpp::List pbivnorm_drezner_derivative(Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector rho);
RcppExport SEXP _immer_pbivnorm_drezner_derivative(SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbivnorm_drezner_derivative(a, b, rho));
    return rcpp_result_gen;
END_RCPP
}
// pml_calc_probs
Rcpp::NumericVector pml_calc_probs(Rcpp::NumericMatrix tau, Rcpp::NumericMatrix rho, Rcpp::IntegerMatrix item_table);
RcppExport SEXP _immer_pml_calc_probs(SEXP tauSEXP, SEXP rhoSEXP, SEXP item_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_calc_probs(tau, rho, item_table));
    return rcpp_result_gen;
END_RCPP
}
// pml_probs_derivatives_tau_rho
Rcpp::List pml_probs_derivatives_tau_rho(Rcpp::NumericMatrix tau, Rcpp::NumericMatrix rho, Rcpp::IntegerMatrix item_table, Rcpp::IntegerMatrix rho_index, int N_rho, Rcpp::IntegerMatrix tau_index, int N_tau);
RcppExport SEXP _immer_pml_probs_derivatives_tau_rho(SEXP tauSEXP, SEXP rhoSEXP, SEXP item_tableSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_probs_derivatives_tau_rho(tau, rho, item_table, rho_index, N_rho, tau_index, N_tau));
    return rcpp_result_gen;
END_RCPP
}
// immer_bilinear_form
double immer_bilinear_form(Rcpp::NumericVector x, Rcpp::NumericMatrix A, Rcpp::NumericVector y);
RcppExport SEXP _immer_immer_bilinear_form(SEXP xSEXP, SEXP ASEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(immer_bilinear_form(x, A, y));
    return rcpp_result_gen;
END_RCPP
}
// immer_derivative_correlation
double immer_derivative_correlation(double cov12, double var1, double var2, double cov12_der, double var1_der, double var2_der);
RcppExport SEXP _immer_immer_derivative_correlation(SEXP cov12SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP cov12_derSEXP, SEXP var1_derSEXP, SEXP var2_derSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cov12(cov12SEXP);
    Rcpp::traits::input_parameter< double >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< double >::type cov12_der(cov12_derSEXP);
    Rcpp::traits::input_parameter< double >::type var1_der(var1_derSEXP);
    Rcpp::traits::input_parameter< double >::type var2_der(var2_derSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_derivative_correlation(cov12, var1, var2, cov12_der, var1_der, var2_der));
    return rcpp_result_gen;
END_RCPP
}
// pml_trafo_irt_parameters
Rcpp::List pml_trafo_irt_parameters(Rcpp::NumericMatrix LAM, Rcpp::NumericMatrix PHI, Rcpp::NumericMatrix PSI, Rcpp::NumericMatrix GAM, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix LAM_index, int N_LAM, Rcpp::IntegerMatrix PHI_index, int N_PHI, Rcpp::IntegerMatrix PSI_index, int N_PSI, Rcpp::IntegerMatrix tau_index, int N_tau, Rcpp::IntegerMatrix GAM_index, int N_GAM, Rcpp::IntegerMatrix rho_index, int N_rho);
RcppExport SEXP _immer_pml_trafo_irt_parameters(SEXP LAMSEXP, SEXP PHISEXP, SEXP PSISEXP, SEXP GAMSEXP, SEXP item_pairsSEXP, SEXP LAM_indexSEXP, SEXP N_LAMSEXP, SEXP PHI_indexSEXP, SEXP N_PHISEXP, SEXP PSI_indexSEXP, SEXP N_PSISEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP, SEXP GAM_indexSEXP, SEXP N_GAMSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM(LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI(PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM(GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_trafo_irt_parameters(LAM, PHI, PSI, GAM, item_pairs, LAM_index, N_LAM, PHI_index, N_PHI, PSI_index, N_PSI, tau_index, N_tau, GAM_index, N_GAM, rho_index, N_rho));
    return rcpp_result_gen;
END_RCPP
}
// pml_trafo_variances_covariances
Rcpp::List pml_trafo_variances_covariances(Rcpp::NumericMatrix LAM, Rcpp::NumericMatrix PHI, Rcpp::NumericMatrix PSI, Rcpp::NumericMatrix GAM, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix LAM_index, int N_LAM, Rcpp::IntegerMatrix PHI_index, int N_PHI, Rcpp::IntegerMatrix PSI_index, int N_PSI, Rcpp::IntegerMatrix tau_index, int N_tau, Rcpp::IntegerMatrix GAM_index, int N_GAM, Rcpp::IntegerMatrix rho_index, int N_rho);
RcppExport SEXP _immer_pml_trafo_variances_covariances(SEXP LAMSEXP, SEXP PHISEXP, SEXP PSISEXP, SEXP GAMSEXP, SEXP item_pairsSEXP, SEXP LAM_indexSEXP, SEXP N_LAMSEXP, SEXP PHI_indexSEXP, SEXP N_PHISEXP, SEXP PSI_indexSEXP, SEXP N_PSISEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP, SEXP GAM_indexSEXP, SEXP N_GAMSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM(LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI(PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM(GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_trafo_variances_covariances(LAM, PHI, PSI, GAM, item_pairs, LAM_index, N_LAM, PHI_index, N_PHI, PSI_index, N_PSI, tau_index, N_tau, GAM_index, N_GAM, rho_index, N_rho));
    return rcpp_result_gen;
END_RCPP
}
// pml_trafo_irt_parameters_derivative
Rcpp::List pml_trafo_irt_parameters_derivative(Rcpp::NumericMatrix LAM, Rcpp::NumericMatrix PHI, Rcpp::NumericMatrix PSI, Rcpp::NumericMatrix GAM, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix LAM_index, int N_LAM, Rcpp::IntegerMatrix PHI_index, int N_PHI, Rcpp::IntegerMatrix PSI_index, int N_PSI, Rcpp::IntegerMatrix tau_index, int N_tau, Rcpp::IntegerMatrix GAM_index, int N_GAM, Rcpp::IntegerMatrix rho_index, int N_rho);
RcppExport SEXP _immer_pml_trafo_irt_parameters_derivative(SEXP LAMSEXP, SEXP PHISEXP, SEXP PSISEXP, SEXP GAMSEXP, SEXP item_pairsSEXP, SEXP LAM_indexSEXP, SEXP N_LAMSEXP, SEXP PHI_indexSEXP, SEXP N_PHISEXP, SEXP PSI_indexSEXP, SEXP N_PSISEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP, SEXP GAM_indexSEXP, SEXP N_GAMSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM(LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI(PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM(GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_trafo_irt_parameters_derivative(LAM, PHI, PSI, GAM, item_pairs, LAM_index, N_LAM, PHI_index, N_PHI, PSI_index, N_PSI, tau_index, N_tau, GAM_index, N_GAM, rho_index, N_rho));
    return rcpp_result_gen;
END_RCPP
}
// immer_sum_product
double immer_sum_product(Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _immer_immer_sum_product(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sum_product(x, y));
    return rcpp_result_gen;
END_RCPP
}
// immer_sum_matrix_product
Rcpp::NumericMatrix immer_sum_matrix_product(Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericMatrix y1, Rcpp::NumericMatrix y2);
RcppExport SEXP _immer_immer_sum_matrix_product(SEXP x1SEXP, SEXP x2SEXP, SEXP y1SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sum_matrix_product(x1, x2, y1, y2));
    return rcpp_result_gen;
END_RCPP
}
// pml_calc_prob_pars
Rcpp::List pml_calc_prob_pars(Rcpp::NumericMatrix LAM, Rcpp::NumericMatrix PHI, Rcpp::NumericMatrix PSI, Rcpp::NumericMatrix GAM, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix LAM_index, int N_LAM, Rcpp::IntegerMatrix PHI_index, int N_PHI, Rcpp::IntegerMatrix PSI_index, int N_PSI, Rcpp::IntegerMatrix tau_index, int N_tau, Rcpp::IntegerMatrix GAM_index, int N_GAM, Rcpp::IntegerMatrix rho_index, int N_rho, Rcpp::IntegerMatrix item_table);
RcppExport SEXP _immer_pml_calc_prob_pars(SEXP LAMSEXP, SEXP PHISEXP, SEXP PSISEXP, SEXP GAMSEXP, SEXP item_pairsSEXP, SEXP LAM_indexSEXP, SEXP N_LAMSEXP, SEXP PHI_indexSEXP, SEXP N_PHISEXP, SEXP PSI_indexSEXP, SEXP N_PSISEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP, SEXP GAM_indexSEXP, SEXP N_GAMSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP, SEXP item_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM(LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI(PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM(GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_calc_prob_pars(LAM, PHI, PSI, GAM, item_pairs, LAM_index, N_LAM, PHI_index, N_PHI, PSI_index, N_PSI, tau_index, N_tau, GAM_index, N_GAM, rho_index, N_rho, item_table));
    return rcpp_result_gen;
END_RCPP
}
// pml_derivative_fa_parameters
Rcpp::List pml_derivative_fa_parameters(Rcpp::NumericMatrix LAM, Rcpp::NumericMatrix PHI, Rcpp::NumericMatrix PSI, Rcpp::NumericMatrix GAM, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix LAM_index, int N_LAM, Rcpp::IntegerMatrix PHI_index, int N_PHI, Rcpp::IntegerMatrix PSI_index, int N_PSI, Rcpp::IntegerMatrix tau_index, int N_tau, Rcpp::IntegerMatrix GAM_index, int N_GAM, Rcpp::IntegerMatrix rho_index, int N_rho, Rcpp::IntegerMatrix item_table);
RcppExport SEXP _immer_pml_derivative_fa_parameters(SEXP LAMSEXP, SEXP PHISEXP, SEXP PSISEXP, SEXP GAMSEXP, SEXP item_pairsSEXP, SEXP LAM_indexSEXP, SEXP N_LAMSEXP, SEXP PHI_indexSEXP, SEXP N_PHISEXP, SEXP PSI_indexSEXP, SEXP N_PSISEXP, SEXP tau_indexSEXP, SEXP N_tauSEXP, SEXP GAM_indexSEXP, SEXP N_GAMSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP, SEXP item_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM(LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI(PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM(GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_derivative_fa_parameters(LAM, PHI, PSI, GAM, item_pairs, LAM_index, N_LAM, PHI_index, N_PHI, PSI_index, N_PSI, tau_index, N_tau, GAM_index, N_GAM, rho_index, N_rho, item_table));
    return rcpp_result_gen;
END_RCPP
}
// immer_sparse_matrix_create_index
Rcpp::NumericMatrix immer_sparse_matrix_create_index(Rcpp::NumericMatrix x);
RcppExport SEXP _immer_immer_sparse_matrix_create_index(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sparse_matrix_create_index(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_sparse_matrix_mat_mult_vec
Rcpp::NumericVector immer_sparse_matrix_mat_mult_vec(Rcpp::NumericMatrix x_sparse, Rcpp::NumericVector vec, int NX);
RcppExport SEXP _immer_immer_sparse_matrix_mat_mult_vec(SEXP x_sparseSEXP, SEXP vecSEXP, SEXP NXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x_sparse(x_sparseSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type NX(NXSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sparse_matrix_mat_mult_vec(x_sparse, vec, NX));
    return rcpp_result_gen;
END_RCPP
}
// immer_matrix_mat_to_vec
Rcpp::NumericVector immer_matrix_mat_to_vec(Rcpp::NumericMatrix x, Rcpp::IntegerMatrix x_index);
RcppExport SEXP _immer_immer_matrix_mat_to_vec(SEXP xSEXP, SEXP x_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type x_index(x_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_matrix_mat_to_vec(x, x_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_matrix_vec_to_mat
Rcpp::NumericMatrix immer_matrix_vec_to_mat(Rcpp::NumericVector par, Rcpp::IntegerMatrix x_index, Rcpp::NumericMatrix x_init);
RcppExport SEXP _immer_immer_matrix_vec_to_mat(SEXP parSEXP, SEXP x_indexSEXP, SEXP x_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type x_index(x_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x_init(x_initSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_matrix_vec_to_mat(par, x_index, x_init));
    return rcpp_result_gen;
END_RCPP
}
// pml_derivative_designmatrix
Rcpp::NumericVector pml_derivative_designmatrix(Rcpp::NumericMatrix probs_der_par, Rcpp::NumericMatrix W_par, Rcpp::NumericVector par, Rcpp::NumericVector do_log);
RcppExport SEXP _immer_pml_derivative_designmatrix(SEXP probs_der_parSEXP, SEXP W_parSEXP, SEXP parSEXP, SEXP do_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs_der_par(probs_der_parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_par(W_parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log(do_logSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_derivative_designmatrix(probs_der_par, W_par, par, do_log));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_types_to_full_pars
Rcpp::NumericMatrix pml_basispar_types_to_full_pars(Rcpp::NumericMatrix W_par, Rcpp::NumericVector par_basispar, Rcpp::NumericMatrix par_init, Rcpp::IntegerMatrix par_index, Rcpp::NumericVector do_log_par);
RcppExport SEXP _immer_pml_basispar_types_to_full_pars(SEXP W_parSEXP, SEXP par_basisparSEXP, SEXP par_initSEXP, SEXP par_indexSEXP, SEXP do_log_parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_par(W_parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par_basispar(par_basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type par_init(par_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type par_index(par_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_par(do_log_parSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_types_to_full_pars(W_par, par_basispar, par_init, par_index, do_log_par));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_to_pars_types_helper
Rcpp::NumericVector pml_basispar_to_pars_types_helper(Rcpp::NumericVector basispar, Rcpp::IntegerVector design_temp, int Nvv);
RcppExport SEXP _immer_pml_basispar_to_pars_types_helper(SEXP basisparSEXP, SEXP design_tempSEXP, SEXP NvvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type basispar(basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type design_temp(design_tempSEXP);
    Rcpp::traits::input_parameter< int >::type Nvv(NvvSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_to_pars_types_helper(basispar, design_temp, Nvv));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_to_pars_types
Rcpp::List pml_basispar_to_pars_types(Rcpp::NumericVector basispar, Rcpp::IntegerMatrix basispar_design, Rcpp::IntegerVector basispar_length);
RcppExport SEXP _immer_pml_basispar_to_pars_types(SEXP basisparSEXP, SEXP basispar_designSEXP, SEXP basispar_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type basispar(basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type basispar_design(basispar_designSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type basispar_length(basispar_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_to_pars_types(basispar, basispar_design, basispar_length));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_to_parameters
Rcpp::List pml_basispar_to_parameters(Rcpp::NumericVector basispar, Rcpp::IntegerMatrix basispar_design, Rcpp::IntegerVector basispar_length, Rcpp::NumericMatrix W_LAM, Rcpp::NumericMatrix LAM_init, Rcpp::IntegerMatrix LAM_index, Rcpp::NumericMatrix W_GAM, Rcpp::NumericMatrix GAM_init, Rcpp::IntegerMatrix GAM_index, Rcpp::NumericMatrix W_PHI, Rcpp::NumericMatrix PHI_init, Rcpp::IntegerMatrix PHI_index, Rcpp::NumericMatrix W_PSI, Rcpp::NumericMatrix PSI_init, Rcpp::IntegerMatrix PSI_index, Rcpp::NumericVector do_log_LAM, Rcpp::NumericVector do_log_GAM, Rcpp::NumericVector do_log_PHI, Rcpp::NumericVector do_log_PSI);
RcppExport SEXP _immer_pml_basispar_to_parameters(SEXP basisparSEXP, SEXP basispar_designSEXP, SEXP basispar_lengthSEXP, SEXP W_LAMSEXP, SEXP LAM_initSEXP, SEXP LAM_indexSEXP, SEXP W_GAMSEXP, SEXP GAM_initSEXP, SEXP GAM_indexSEXP, SEXP W_PHISEXP, SEXP PHI_initSEXP, SEXP PHI_indexSEXP, SEXP W_PSISEXP, SEXP PSI_initSEXP, SEXP PSI_indexSEXP, SEXP do_log_LAMSEXP, SEXP do_log_GAMSEXP, SEXP do_log_PHISEXP, SEXP do_log_PSISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type basispar(basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type basispar_design(basispar_designSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type basispar_length(basispar_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_LAM(W_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM_init(LAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_GAM(W_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM_init(GAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PHI(W_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI_init(PHI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PSI(W_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI_init(PSI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_LAM(do_log_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_GAM(do_log_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PHI(do_log_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PSI(do_log_PSISEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_to_parameters(basispar, basispar_design, basispar_length, W_LAM, LAM_init, LAM_index, W_GAM, GAM_init, GAM_index, W_PHI, PHI_init, PHI_index, W_PSI, PSI_init, PSI_index, do_log_LAM, do_log_GAM, do_log_PHI, do_log_PSI));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_to_probs
Rcpp::List pml_basispar_to_probs(Rcpp::NumericVector basispar, Rcpp::IntegerMatrix basispar_design, Rcpp::IntegerVector basispar_length, Rcpp::NumericMatrix W_LAM, Rcpp::NumericMatrix LAM_init, Rcpp::IntegerMatrix LAM_index, Rcpp::NumericMatrix W_GAM, Rcpp::NumericMatrix GAM_init, Rcpp::IntegerMatrix GAM_index, Rcpp::NumericMatrix W_PHI, Rcpp::NumericMatrix PHI_init, Rcpp::IntegerMatrix PHI_index, Rcpp::NumericMatrix W_PSI, Rcpp::NumericMatrix PSI_init, Rcpp::IntegerMatrix PSI_index, int N_LAM, int N_GAM, int N_PHI, int N_PSI, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix item_table, Rcpp::IntegerMatrix tau_index, Rcpp::IntegerMatrix rho_index, int N_rho, int N_tau, Rcpp::NumericVector do_log_LAM, Rcpp::NumericVector do_log_GAM, Rcpp::NumericVector do_log_PHI, Rcpp::NumericVector do_log_PSI);
RcppExport SEXP _immer_pml_basispar_to_probs(SEXP basisparSEXP, SEXP basispar_designSEXP, SEXP basispar_lengthSEXP, SEXP W_LAMSEXP, SEXP LAM_initSEXP, SEXP LAM_indexSEXP, SEXP W_GAMSEXP, SEXP GAM_initSEXP, SEXP GAM_indexSEXP, SEXP W_PHISEXP, SEXP PHI_initSEXP, SEXP PHI_indexSEXP, SEXP W_PSISEXP, SEXP PSI_initSEXP, SEXP PSI_indexSEXP, SEXP N_LAMSEXP, SEXP N_GAMSEXP, SEXP N_PHISEXP, SEXP N_PSISEXP, SEXP item_pairsSEXP, SEXP item_tableSEXP, SEXP tau_indexSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP, SEXP N_tauSEXP, SEXP do_log_LAMSEXP, SEXP do_log_GAMSEXP, SEXP do_log_PHISEXP, SEXP do_log_PSISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type basispar(basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type basispar_design(basispar_designSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type basispar_length(basispar_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_LAM(W_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM_init(LAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_GAM(W_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM_init(GAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PHI(W_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI_init(PHI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PSI(W_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI_init(PSI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_LAM(do_log_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_GAM(do_log_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PHI(do_log_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PSI(do_log_PSISEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_to_probs(basispar, basispar_design, basispar_length, W_LAM, LAM_init, LAM_index, W_GAM, GAM_init, GAM_index, W_PHI, PHI_init, PHI_index, W_PSI, PSI_init, PSI_index, N_LAM, N_GAM, N_PHI, N_PSI, item_pairs, item_table, tau_index, rho_index, N_rho, N_tau, do_log_LAM, do_log_GAM, do_log_PHI, do_log_PSI));
    return rcpp_result_gen;
END_RCPP
}
// pml_basispar_to_derivatives
Rcpp::List pml_basispar_to_derivatives(Rcpp::NumericVector basispar, Rcpp::IntegerMatrix basispar_design, Rcpp::IntegerVector basispar_length, Rcpp::NumericMatrix W_LAM, Rcpp::NumericMatrix LAM_init, Rcpp::IntegerMatrix LAM_index, Rcpp::NumericMatrix W_GAM, Rcpp::NumericMatrix GAM_init, Rcpp::IntegerMatrix GAM_index, Rcpp::NumericMatrix W_PHI, Rcpp::NumericMatrix PHI_init, Rcpp::IntegerMatrix PHI_index, Rcpp::NumericMatrix W_PSI, Rcpp::NumericMatrix PSI_init, Rcpp::IntegerMatrix PSI_index, int N_LAM, int N_GAM, int N_PHI, int N_PSI, Rcpp::IntegerMatrix item_pairs, Rcpp::IntegerMatrix item_table, Rcpp::IntegerMatrix tau_index, Rcpp::IntegerMatrix rho_index, int N_rho, int N_tau, Rcpp::NumericVector do_log_LAM, Rcpp::NumericVector do_log_GAM, Rcpp::NumericVector do_log_PHI, Rcpp::NumericVector do_log_PSI);
RcppExport SEXP _immer_pml_basispar_to_derivatives(SEXP basisparSEXP, SEXP basispar_designSEXP, SEXP basispar_lengthSEXP, SEXP W_LAMSEXP, SEXP LAM_initSEXP, SEXP LAM_indexSEXP, SEXP W_GAMSEXP, SEXP GAM_initSEXP, SEXP GAM_indexSEXP, SEXP W_PHISEXP, SEXP PHI_initSEXP, SEXP PHI_indexSEXP, SEXP W_PSISEXP, SEXP PSI_initSEXP, SEXP PSI_indexSEXP, SEXP N_LAMSEXP, SEXP N_GAMSEXP, SEXP N_PHISEXP, SEXP N_PSISEXP, SEXP item_pairsSEXP, SEXP item_tableSEXP, SEXP tau_indexSEXP, SEXP rho_indexSEXP, SEXP N_rhoSEXP, SEXP N_tauSEXP, SEXP do_log_LAMSEXP, SEXP do_log_GAMSEXP, SEXP do_log_PHISEXP, SEXP do_log_PSISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type basispar(basisparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type basispar_design(basispar_designSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type basispar_length(basispar_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_LAM(W_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type LAM_init(LAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type LAM_index(LAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_GAM(W_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type GAM_init(GAM_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type GAM_index(GAM_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PHI(W_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PHI_init(PHI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PHI_index(PHI_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W_PSI(W_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PSI_init(PSI_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type PSI_index(PSI_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_LAM(N_LAMSEXP);
    Rcpp::traits::input_parameter< int >::type N_GAM(N_GAMSEXP);
    Rcpp::traits::input_parameter< int >::type N_PHI(N_PHISEXP);
    Rcpp::traits::input_parameter< int >::type N_PSI(N_PSISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_pairs(item_pairsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type item_table(item_tableSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tau_index(tau_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_index(rho_indexSEXP);
    Rcpp::traits::input_parameter< int >::type N_rho(N_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N_tau(N_tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_LAM(do_log_LAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_GAM(do_log_GAMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PHI(do_log_PHISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type do_log_PSI(do_log_PSISEXP);
    rcpp_result_gen = Rcpp::wrap(pml_basispar_to_derivatives(basispar, basispar_design, basispar_length, W_LAM, LAM_init, LAM_index, W_GAM, GAM_init, GAM_index, W_PHI, PHI_init, PHI_index, W_PSI, PSI_init, PSI_index, N_LAM, N_GAM, N_PHI, N_PSI, item_pairs, item_table, tau_index, rho_index, N_rho, N_tau, do_log_LAM, do_log_GAM, do_log_PHI, do_log_PSI));
    return rcpp_result_gen;
END_RCPP
}
// immer_cmml_proc_freq
Rcpp::NumericMatrix immer_cmml_proc_freq(Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int K, Rcpp::NumericVector weights);
RcppExport SEXP _immer_immer_cmml_proc_freq(SEXP datSEXP, SEXP dat_respSEXP, SEXP KSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_cmml_proc_freq(dat, dat_resp, K, weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_cpml_proc_generate_rho_index
Rcpp::IntegerMatrix immer_cpml_proc_generate_rho_index(int I);
RcppExport SEXP _immer_immer_cpml_proc_generate_rho_index(SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(immer_cpml_proc_generate_rho_index(I));
    return rcpp_result_gen;
END_RCPP
}
// immer_cpml_proc_generate_tau
Rcpp::List immer_cpml_proc_generate_tau(Rcpp::IntegerVector maxK, int K);
RcppExport SEXP _immer_immer_cpml_proc_generate_tau(SEXP maxKSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_cpml_proc_generate_tau(maxK, K));
    return rcpp_result_gen;
END_RCPP
}
// immer_cpml_proc_generate_LAM
Rcpp::List immer_cpml_proc_generate_LAM(Rcpp::IntegerMatrix Q);
RcppExport SEXP _immer_immer_cpml_proc_generate_LAM(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_cpml_proc_generate_LAM(Q));
    return rcpp_result_gen;
END_RCPP
}
// immer_cpml_proc_generate_PHI
Rcpp::List immer_cpml_proc_generate_PHI(int D, bool use_diag);
RcppExport SEXP _immer_immer_cpml_proc_generate_PHI(SEXP DSEXP, SEXP use_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type use_diag(use_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_cpml_proc_generate_PHI(D, use_diag));
    return rcpp_result_gen;
END_RCPP
}
// immer_logdnorm2
double immer_logdnorm2(double x, double y, double mu1, double mu2, double var1, double var2, double cov12);
RcppExport SEXP _immer_immer_logdnorm2(SEXP xSEXP, SEXP ySEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP cov12SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< double >::type cov12(cov12SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_logdnorm2(x, y, mu1, mu2, var1, var2, cov12));
    return rcpp_result_gen;
END_RCPP
}
// immer_logdnorm2_derivative
Rcpp::List immer_logdnorm2_derivative(double x, double y, double mu1, double mu2, double var1, double var2, double cov12);
RcppExport SEXP _immer_immer_logdnorm2_derivative(SEXP xSEXP, SEXP ySEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP var1SEXP, SEXP var2SEXP, SEXP cov12SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type var2(var2SEXP);
    Rcpp::traits::input_parameter< double >::type cov12(cov12SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_logdnorm2_derivative(x, y, mu1, mu2, var1, var2, cov12));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_sample_prob_index
Rcpp::NumericVector subimmer_sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_subimmer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_hrm_rcpp
Rcpp::NumericVector subimmer_probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_testlet_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_sampling_xi
Rcpp::NumericVector immer_sampling_xi(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind, Rcpp::NumericVector phi, Rcpp::NumericVector psi, double eps, Rcpp::NumericVector pid, Rcpp::NumericVector rater, int N);
RcppExport SEXP _immer_immer_sampling_xi(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP epsSEXP, SEXP pidSEXP, SEXP raterSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rater(raterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sampling_xi(x, theta, b, a, K, x_ind, phi, psi, eps, pid, rater, N));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_rcpp
Rcpp::NumericVector probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// probs_hrm_rcpp
Rcpp::NumericVector probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// sample_prob_index
Rcpp::NumericVector sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_testlet_rcpp
Rcpp::NumericVector probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_gpcm_prob_one_item_one_person
Rcpp::NumericVector immer_gpcm_prob_one_item_one_person(double theta1, Rcpp::NumericVector b_ii, double a);
RcppExport SEXP _immer_immer_gpcm_prob_one_item_one_person(SEXP theta1SEXP, SEXP b_iiSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_ii(b_iiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_gpcm_prob_one_item_one_person(theta1, b_ii, a));
    return rcpp_result_gen;
END_RCPP
}
// immer_gpcm_calc_probs
Rcpp::NumericVector immer_gpcm_calc_probs(Rcpp::NumericVector theta, Rcpp::NumericMatrix b, Rcpp::NumericVector a);
RcppExport SEXP _immer_immer_gpcm_calc_probs(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_gpcm_calc_probs(theta, b, a));
    return rcpp_result_gen;
END_RCPP
}
// immer_irt_likelihood_gpcm
Rcpp::NumericMatrix immer_irt_likelihood_gpcm(Rcpp::NumericVector probs, Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int TP, int K);
RcppExport SEXP _immer_immer_irt_likelihood_gpcm(SEXP probsSEXP, SEXP datSEXP, SEXP dat_respSEXP, SEXP TPSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_irt_likelihood_gpcm(probs, dat, dat_resp, TP, K));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_prior_normal
Rcpp::NumericMatrix immer_latent_regression_prior_normal(Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector theta);
RcppExport SEXP _immer_immer_latent_regression_prior_normal(SEXP muSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_prior_normal(mu, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_posterior
Rcpp::List immer_latent_regression_posterior(Rcpp::NumericMatrix like, Rcpp::NumericMatrix prior, Rcpp::NumericVector weights);
RcppExport SEXP _immer_immer_latent_regression_posterior(SEXP likeSEXP, SEXP priorSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_posterior(like, prior, weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_mu_sigma
Rcpp::List immer_latent_regression_calc_mu_sigma(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector beta, Rcpp::NumericVector gamma);
RcppExport SEXP _immer_immer_latent_regression_calc_mu_sigma(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_mu_sigma(X, group, G, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// immer_add_elements
Rcpp::NumericVector immer_add_elements(Rcpp::NumericVector x, int pos, double h);
RcppExport SEXP _immer_immer_add_elements(SEXP xSEXP, SEXP posSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_add_elements(x, pos, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_individual_likelihood
Rcpp::NumericVector immer_latent_regression_calc_individual_likelihood(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like);
RcppExport SEXP _immer_immer_latent_regression_calc_individual_likelihood(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_individual_likelihood(X, group, G, pars, theta, weights, like));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_individual_likelihood_increment
Rcpp::NumericVector immer_latent_regression_calc_individual_likelihood_increment(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like, int pos1, double h1, int pos2, double h2);
RcppExport SEXP _immer_immer_latent_regression_calc_individual_likelihood_increment(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP, SEXP pos1SEXP, SEXP h1SEXP, SEXP pos2SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< int >::type pos1(pos1SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< int >::type pos2(pos2SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_individual_likelihood_increment(X, group, G, pars, theta, weights, like, pos1, h1, pos2, h2));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_vcov_xpd
Rcpp::NumericMatrix immer_latent_regression_vcov_xpd(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like, double h);
RcppExport SEXP _immer_immer_latent_regression_vcov_xpd(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_vcov_xpd(X, group, G, pars, theta, weights, like, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_prob_one_item_one_person
Rcpp::NumericVector immer_jml_prob_one_item_one_person(double theta1, Rcpp::NumericVector b_ii);
RcppExport SEXP _immer_immer_jml_prob_one_item_one_person(SEXP theta1SEXP, SEXP b_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_ii(b_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_prob_one_item_one_person(theta1, b_ii));
    return rcpp_result_gen;
END_RCPP
}
// immer_trim_increment_rcpp
double immer_trim_increment_rcpp(double incr, double max_incr);
RcppExport SEXP _immer_immer_trim_increment_rcpp(SEXP incrSEXP, SEXP max_incrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type incr(incrSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_trim_increment_rcpp(incr, max_incr));
    return rcpp_result_gen;
END_RCPP
}
// immer_abs2
double immer_abs2(double x);
RcppExport SEXP _immer_immer_abs2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_abs2(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_item_derivatives
Rcpp::List immer_jml_update_item_derivatives(Rcpp::NumericVector theta, Rcpp::NumericMatrix score_items, int N, int K, int I, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericMatrix b, Rcpp::NumericVector A_, Rcpp::NumericVector xsi, Rcpp::NumericVector max_incr, Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector ItemScore, Rcpp::NumericVector update, Rcpp::NumericVector update_weights);
RcppExport SEXP _immer_immer_jml_update_item_derivatives(SEXP thetaSEXP, SEXP score_itemsSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP dat_respSEXP, SEXP bSEXP, SEXP A_SEXP, SEXP xsiSEXP, SEXP max_incrSEXP, SEXP b_fixedSEXP, SEXP ItemScoreSEXP, SEXP updateSEXP, SEXP update_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type score_items(score_itemsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xsi(xsiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ItemScore(ItemScoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update_weights(update_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_item_derivatives(theta, score_items, N, K, I, dat_resp, b, A_, xsi, max_incr, b_fixed, ItemScore, update, update_weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_theta_derivatives
Rcpp::List immer_jml_update_theta_derivatives(Rcpp::NumericVector theta, Rcpp::NumericVector score_pers, int N, int K, int I, Rcpp::NumericMatrix b, double max_incr, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericVector update);
RcppExport SEXP _immer_immer_jml_update_theta_derivatives(SEXP thetaSEXP, SEXP score_persSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP bSEXP, SEXP max_incrSEXP, SEXP dat_respSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type score_pers(score_persSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_theta_derivatives(theta, score_pers, N, K, I, b, max_incr, dat_resp, update));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_immer_immer_ccml_proc_freq_item_pair", (DL_FUNC) &_immer_immer_ccml_proc_freq_item_pair, 6},
    {"_immer_immer_ccml_proc_freq", (DL_FUNC) &_immer_immer_ccml_proc_freq, 4},
    {"_immer_immer_ccml_calc_item_intercepts", (DL_FUNC) &_immer_immer_ccml_calc_item_intercepts, 3},
    {"_immer_immer_ccml_probs", (DL_FUNC) &_immer_immer_ccml_probs, 7},
    {"_immer_immer_ccml_probs_from_par", (DL_FUNC) &_immer_immer_ccml_probs_from_par, 13},
    {"_immer_immer_ccml_opt_function", (DL_FUNC) &_immer_immer_ccml_opt_function, 9},
    {"_immer_immer_ccml_opt_function_par", (DL_FUNC) &_immer_immer_ccml_opt_function_par, 11},
    {"_immer_immer_ccml_gradient", (DL_FUNC) &_immer_immer_ccml_gradient, 9},
    {"_immer_immer_ccml_gradient_par", (DL_FUNC) &_immer_immer_ccml_gradient_par, 11},
    {"_immer_immer_ccml_se", (DL_FUNC) &_immer_immer_ccml_se, 12},
    {"_immer_immer_pnorm", (DL_FUNC) &_immer_immer_pnorm, 1},
    {"_immer_immer_signum", (DL_FUNC) &_immer_immer_signum, 1},
    {"_immer_immer_dnorm2", (DL_FUNC) &_immer_immer_dnorm2, 3},
    {"_immer_immer_dnorm", (DL_FUNC) &_immer_immer_dnorm, 1},
    {"_immer_pbivnorm_drezner_fct_f_cpp", (DL_FUNC) &_immer_pbivnorm_drezner_fct_f_cpp, 5},
    {"_immer_pbivnorm_drezner_all_negative_cpp", (DL_FUNC) &_immer_pbivnorm_drezner_all_negative_cpp, 3},
    {"_immer_pbivnorm_drezner_product_negative_cpp", (DL_FUNC) &_immer_pbivnorm_drezner_product_negative_cpp, 3},
    {"_immer_pbivnorm_drezner_product_positive_cpp", (DL_FUNC) &_immer_pbivnorm_drezner_product_positive_cpp, 3},
    {"_immer_pbivnorm_drezner_numeric_arguments", (DL_FUNC) &_immer_pbivnorm_drezner_numeric_arguments, 3},
    {"_immer_pbivnorm_drezner", (DL_FUNC) &_immer_pbivnorm_drezner, 3},
    {"_immer_pbivnorm_drezner_derivative_rho_numeric", (DL_FUNC) &_immer_pbivnorm_drezner_derivative_rho_numeric, 3},
    {"_immer_pbivnorm_drezner_derivative_a_numeric", (DL_FUNC) &_immer_pbivnorm_drezner_derivative_a_numeric, 3},
    {"_immer_pbivnorm_drezner_derivative_b_numeric", (DL_FUNC) &_immer_pbivnorm_drezner_derivative_b_numeric, 3},
    {"_immer_pbivnorm_drezner_derivative", (DL_FUNC) &_immer_pbivnorm_drezner_derivative, 3},
    {"_immer_pml_calc_probs", (DL_FUNC) &_immer_pml_calc_probs, 3},
    {"_immer_pml_probs_derivatives_tau_rho", (DL_FUNC) &_immer_pml_probs_derivatives_tau_rho, 7},
    {"_immer_immer_bilinear_form", (DL_FUNC) &_immer_immer_bilinear_form, 3},
    {"_immer_immer_derivative_correlation", (DL_FUNC) &_immer_immer_derivative_correlation, 6},
    {"_immer_pml_trafo_irt_parameters", (DL_FUNC) &_immer_pml_trafo_irt_parameters, 17},
    {"_immer_pml_trafo_variances_covariances", (DL_FUNC) &_immer_pml_trafo_variances_covariances, 17},
    {"_immer_pml_trafo_irt_parameters_derivative", (DL_FUNC) &_immer_pml_trafo_irt_parameters_derivative, 17},
    {"_immer_immer_sum_product", (DL_FUNC) &_immer_immer_sum_product, 2},
    {"_immer_immer_sum_matrix_product", (DL_FUNC) &_immer_immer_sum_matrix_product, 4},
    {"_immer_pml_calc_prob_pars", (DL_FUNC) &_immer_pml_calc_prob_pars, 18},
    {"_immer_pml_derivative_fa_parameters", (DL_FUNC) &_immer_pml_derivative_fa_parameters, 18},
    {"_immer_immer_sparse_matrix_create_index", (DL_FUNC) &_immer_immer_sparse_matrix_create_index, 1},
    {"_immer_immer_sparse_matrix_mat_mult_vec", (DL_FUNC) &_immer_immer_sparse_matrix_mat_mult_vec, 3},
    {"_immer_immer_matrix_mat_to_vec", (DL_FUNC) &_immer_immer_matrix_mat_to_vec, 2},
    {"_immer_immer_matrix_vec_to_mat", (DL_FUNC) &_immer_immer_matrix_vec_to_mat, 3},
    {"_immer_pml_derivative_designmatrix", (DL_FUNC) &_immer_pml_derivative_designmatrix, 4},
    {"_immer_pml_basispar_types_to_full_pars", (DL_FUNC) &_immer_pml_basispar_types_to_full_pars, 5},
    {"_immer_pml_basispar_to_pars_types_helper", (DL_FUNC) &_immer_pml_basispar_to_pars_types_helper, 3},
    {"_immer_pml_basispar_to_pars_types", (DL_FUNC) &_immer_pml_basispar_to_pars_types, 3},
    {"_immer_pml_basispar_to_parameters", (DL_FUNC) &_immer_pml_basispar_to_parameters, 19},
    {"_immer_pml_basispar_to_probs", (DL_FUNC) &_immer_pml_basispar_to_probs, 29},
    {"_immer_pml_basispar_to_derivatives", (DL_FUNC) &_immer_pml_basispar_to_derivatives, 29},
    {"_immer_immer_cmml_proc_freq", (DL_FUNC) &_immer_immer_cmml_proc_freq, 4},
    {"_immer_immer_cpml_proc_generate_rho_index", (DL_FUNC) &_immer_immer_cpml_proc_generate_rho_index, 1},
    {"_immer_immer_cpml_proc_generate_tau", (DL_FUNC) &_immer_immer_cpml_proc_generate_tau, 2},
    {"_immer_immer_cpml_proc_generate_LAM", (DL_FUNC) &_immer_immer_cpml_proc_generate_LAM, 1},
    {"_immer_immer_cpml_proc_generate_PHI", (DL_FUNC) &_immer_immer_cpml_proc_generate_PHI, 2},
    {"_immer_immer_logdnorm2", (DL_FUNC) &_immer_immer_logdnorm2, 7},
    {"_immer_immer_logdnorm2_derivative", (DL_FUNC) &_immer_immer_logdnorm2_derivative, 7},
    {"_immer_subimmer_sample_prob_index", (DL_FUNC) &_immer_subimmer_sample_prob_index, 2},
    {"_immer_subimmer_probs_gpcm_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_rcpp, 6},
    {"_immer_subimmer_probs_hrm_rcpp", (DL_FUNC) &_immer_subimmer_probs_hrm_rcpp, 6},
    {"_immer_subimmer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_sampling_xi", (DL_FUNC) &_immer_immer_sampling_xi, 12},
    {"_immer_probs_gpcm_rcpp", (DL_FUNC) &_immer_probs_gpcm_rcpp, 6},
    {"_immer_probs_hrm_rcpp", (DL_FUNC) &_immer_probs_hrm_rcpp, 6},
    {"_immer_sample_prob_index", (DL_FUNC) &_immer_sample_prob_index, 2},
    {"_immer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_gpcm_prob_one_item_one_person", (DL_FUNC) &_immer_immer_gpcm_prob_one_item_one_person, 3},
    {"_immer_immer_gpcm_calc_probs", (DL_FUNC) &_immer_immer_gpcm_calc_probs, 3},
    {"_immer_immer_irt_likelihood_gpcm", (DL_FUNC) &_immer_immer_irt_likelihood_gpcm, 5},
    {"_immer_immer_latent_regression_prior_normal", (DL_FUNC) &_immer_immer_latent_regression_prior_normal, 3},
    {"_immer_immer_latent_regression_posterior", (DL_FUNC) &_immer_immer_latent_regression_posterior, 3},
    {"_immer_immer_latent_regression_calc_mu_sigma", (DL_FUNC) &_immer_immer_latent_regression_calc_mu_sigma, 5},
    {"_immer_immer_add_elements", (DL_FUNC) &_immer_immer_add_elements, 3},
    {"_immer_immer_latent_regression_calc_individual_likelihood", (DL_FUNC) &_immer_immer_latent_regression_calc_individual_likelihood, 7},
    {"_immer_immer_latent_regression_calc_individual_likelihood_increment", (DL_FUNC) &_immer_immer_latent_regression_calc_individual_likelihood_increment, 11},
    {"_immer_immer_latent_regression_vcov_xpd", (DL_FUNC) &_immer_immer_latent_regression_vcov_xpd, 8},
    {"_immer_immer_jml_prob_one_item_one_person", (DL_FUNC) &_immer_immer_jml_prob_one_item_one_person, 2},
    {"_immer_immer_trim_increment_rcpp", (DL_FUNC) &_immer_immer_trim_increment_rcpp, 2},
    {"_immer_immer_abs2", (DL_FUNC) &_immer_immer_abs2, 1},
    {"_immer_immer_jml_update_item_derivatives", (DL_FUNC) &_immer_immer_jml_update_item_derivatives, 14},
    {"_immer_immer_jml_update_theta_derivatives", (DL_FUNC) &_immer_immer_jml_update_theta_derivatives, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_immer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
