//// File Name: RcppExports.cpp
//// File Version: 0.07
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// subimmer_sample_prob_index
Rcpp::NumericVector subimmer_sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_subimmer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_hrm_rcpp
Rcpp::NumericVector subimmer_probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_testlet_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_sampling_xi
Rcpp::NumericVector immer_sampling_xi(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind, Rcpp::NumericVector phi, Rcpp::NumericVector psi, double eps, Rcpp::NumericVector pid, Rcpp::NumericVector rater, int N);
RcppExport SEXP _immer_immer_sampling_xi(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP epsSEXP, SEXP pidSEXP, SEXP raterSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rater(raterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sampling_xi(x, theta, b, a, K, x_ind, phi, psi, eps, pid, rater, N));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_rcpp
Rcpp::NumericVector probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// probs_hrm_rcpp
Rcpp::NumericVector probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// sample_prob_index
Rcpp::NumericVector sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_testlet_rcpp
Rcpp::NumericVector probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_prob_one_item_one_person
Rcpp::NumericVector immer_jml_prob_one_item_one_person(double theta1, Rcpp::NumericVector b_ii);
RcppExport SEXP _immer_immer_jml_prob_one_item_one_person(SEXP theta1SEXP, SEXP b_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_ii(b_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_prob_one_item_one_person(theta1, b_ii));
    return rcpp_result_gen;
END_RCPP
}
// immer_trim_increment_rcpp
double immer_trim_increment_rcpp(double incr, double max_incr);
RcppExport SEXP _immer_immer_trim_increment_rcpp(SEXP incrSEXP, SEXP max_incrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type incr(incrSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_trim_increment_rcpp(incr, max_incr));
    return rcpp_result_gen;
END_RCPP
}
// immer_abs2
double immer_abs2(double x);
RcppExport SEXP _immer_immer_abs2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_abs2(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_item_derivatives
Rcpp::List immer_jml_update_item_derivatives(Rcpp::NumericVector theta, Rcpp::NumericMatrix score_items, int N, int K, int I, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericMatrix b, Rcpp::NumericVector A_, Rcpp::NumericVector xsi, Rcpp::NumericVector max_incr, Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector ItemScore, Rcpp::NumericVector update, Rcpp::NumericVector update_weights);
RcppExport SEXP _immer_immer_jml_update_item_derivatives(SEXP thetaSEXP, SEXP score_itemsSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP dat_respSEXP, SEXP bSEXP, SEXP A_SEXP, SEXP xsiSEXP, SEXP max_incrSEXP, SEXP b_fixedSEXP, SEXP ItemScoreSEXP, SEXP updateSEXP, SEXP update_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type score_items(score_itemsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xsi(xsiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ItemScore(ItemScoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update_weights(update_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_item_derivatives(theta, score_items, N, K, I, dat_resp, b, A_, xsi, max_incr, b_fixed, ItemScore, update, update_weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_theta_derivatives
Rcpp::List immer_jml_update_theta_derivatives(Rcpp::NumericVector theta, Rcpp::NumericVector score_pers, int N, int K, int I, Rcpp::NumericMatrix b, double max_incr, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericVector update);
RcppExport SEXP _immer_immer_jml_update_theta_derivatives(SEXP thetaSEXP, SEXP score_persSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP bSEXP, SEXP max_incrSEXP, SEXP dat_respSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type score_pers(score_persSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_theta_derivatives(theta, score_pers, N, K, I, b, max_incr, dat_resp, update));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_immer_subimmer_sample_prob_index", (DL_FUNC) &_immer_subimmer_sample_prob_index, 2},
    {"_immer_subimmer_probs_gpcm_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_rcpp, 6},
    {"_immer_subimmer_probs_hrm_rcpp", (DL_FUNC) &_immer_subimmer_probs_hrm_rcpp, 6},
    {"_immer_subimmer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_sampling_xi", (DL_FUNC) &_immer_immer_sampling_xi, 12},
    {"_immer_probs_gpcm_rcpp", (DL_FUNC) &_immer_probs_gpcm_rcpp, 6},
    {"_immer_probs_hrm_rcpp", (DL_FUNC) &_immer_probs_hrm_rcpp, 6},
    {"_immer_sample_prob_index", (DL_FUNC) &_immer_sample_prob_index, 2},
    {"_immer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_jml_prob_one_item_one_person", (DL_FUNC) &_immer_immer_jml_prob_one_item_one_person, 2},
    {"_immer_immer_trim_increment_rcpp", (DL_FUNC) &_immer_immer_trim_increment_rcpp, 2},
    {"_immer_immer_abs2", (DL_FUNC) &_immer_immer_abs2, 1},
    {"_immer_immer_jml_update_item_derivatives", (DL_FUNC) &_immer_immer_jml_update_item_derivatives, 14},
    {"_immer_immer_jml_update_theta_derivatives", (DL_FUNC) &_immer_immer_jml_update_theta_derivatives, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_immer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
