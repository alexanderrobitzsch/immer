//// File Name: RcppExports.cpp
//// File Version: 0.12
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// subimmer_sample_prob_index
Rcpp::NumericVector subimmer_sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_subimmer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_hrm_rcpp
Rcpp::NumericVector subimmer_probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// subimmer_probs_gpcm_testlet_rcpp
Rcpp::NumericVector subimmer_probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_subimmer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(subimmer_probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_sampling_xi
Rcpp::NumericVector immer_sampling_xi(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind, Rcpp::NumericVector phi, Rcpp::NumericVector psi, double eps, Rcpp::NumericVector pid, Rcpp::NumericVector rater, int N);
RcppExport SEXP _immer_immer_sampling_xi(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP epsSEXP, SEXP pidSEXP, SEXP raterSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rater(raterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_sampling_xi(x, theta, b, a, K, x_ind, phi, psi, eps, pid, rater, N));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_rcpp
Rcpp::NumericVector probs_gpcm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_rcpp(x, theta, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// probs_hrm_rcpp
Rcpp::NumericVector probs_hrm_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector xi, Rcpp::NumericVector phi, Rcpp::NumericVector psi, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_hrm_rcpp(SEXP xSEXP, SEXP xiSEXP, SEXP phiSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_hrm_rcpp(x, xi, phi, psi, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// sample_prob_index
Rcpp::NumericVector sample_prob_index(Rcpp::NumericMatrix probs, Rcpp::NumericVector rn);
RcppExport SEXP _immer_sample_prob_index(SEXP probsSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_prob_index(probs, rn));
    return rcpp_result_gen;
END_RCPP
}
// probs_gpcm_testlet_rcpp
Rcpp::NumericVector probs_gpcm_testlet_rcpp(Rcpp::NumericVector x, Rcpp::NumericVector theta, Rcpp::NumericVector u, Rcpp::NumericVector b, Rcpp::NumericVector a, int K, Rcpp::NumericVector x_ind);
RcppExport SEXP _immer_probs_gpcm_testlet_rcpp(SEXP xSEXP, SEXP thetaSEXP, SEXP uSEXP, SEXP bSEXP, SEXP aSEXP, SEXP KSEXP, SEXP x_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_ind(x_indSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_gpcm_testlet_rcpp(x, theta, u, b, a, K, x_ind));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_proc_freq_item_pair
Rcpp::NumericMatrix immer_ccml_proc_freq_item_pair(Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int K, Rcpp::NumericVector weights, int ii, int jj);
RcppExport SEXP _immer_immer_ccml_proc_freq_item_pair(SEXP datSEXP, SEXP dat_respSEXP, SEXP KSEXP, SEXP weightsSEXP, SEXP iiSEXP, SEXP jjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< int >::type jj(jjSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_proc_freq_item_pair(dat, dat_resp, K, weights, ii, jj));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_proc_freq
Rcpp::NumericMatrix immer_ccml_proc_freq(Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int K, Rcpp::NumericVector weights);
RcppExport SEXP _immer_immer_ccml_proc_freq(SEXP datSEXP, SEXP dat_respSEXP, SEXP KSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_proc_freq(dat, dat_resp, K, weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_calc_item_intercepts
Rcpp::NumericMatrix immer_ccml_calc_item_intercepts(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par);
RcppExport SEXP _immer_immer_ccml_calc_item_intercepts(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_calc_item_intercepts(b_fixed, A_, par));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_probs
Rcpp::NumericVector immer_ccml_probs(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_probs(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_probs(b, ll_index1, item10, item20, cat1, cat2, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_probs_from_par
Rcpp::NumericVector immer_ccml_probs_from_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, int max_ll_index, int pp1, int pp2, double h1, double h2);
RcppExport SEXP _immer_immer_ccml_probs_from_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP max_ll_indexSEXP, SEXP pp1SEXP, SEXP pp2SEXP, SEXP h1SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    Rcpp::traits::input_parameter< int >::type pp1(pp1SEXP);
    Rcpp::traits::input_parameter< int >::type pp2(pp2SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_probs_from_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, max_ll_index, pp1, pp2, h1, h2));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_opt_function
double immer_ccml_opt_function(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_opt_function(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_opt_function(b, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_opt_function_par
double immer_ccml_opt_function_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_opt_function_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_opt_function_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_gradient
Rcpp::NumericMatrix immer_ccml_gradient(Rcpp::NumericMatrix b, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_gradient(SEXP bSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_gradient(b, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_gradient_par
Rcpp::NumericVector immer_ccml_gradient_par(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index);
RcppExport SEXP _immer_immer_ccml_gradient_par(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_gradient_par(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index));
    return rcpp_result_gen;
END_RCPP
}
// immer_ccml_se
Rcpp::List immer_ccml_se(Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector A_, Rcpp::NumericVector par, Rcpp::NumericVector ll_index1, Rcpp::NumericVector item10, Rcpp::NumericVector item20, Rcpp::NumericVector cat1, Rcpp::NumericVector cat2, Rcpp::NumericVector n, Rcpp::NumericVector ntot, int max_ll_index, double h);
RcppExport SEXP _immer_immer_ccml_se(SEXP b_fixedSEXP, SEXP A_SEXP, SEXP parSEXP, SEXP ll_index1SEXP, SEXP item10SEXP, SEXP item20SEXP, SEXP cat1SEXP, SEXP cat2SEXP, SEXP nSEXP, SEXP ntotSEXP, SEXP max_ll_indexSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ll_index1(ll_index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item10(item10SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item20(item20SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat1(cat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cat2(cat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ntot(ntotSEXP);
    Rcpp::traits::input_parameter< int >::type max_ll_index(max_ll_indexSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_ccml_se(b_fixed, A_, par, ll_index1, item10, item20, cat1, cat2, n, ntot, max_ll_index, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_gpcm_prob_one_item_one_person
Rcpp::NumericVector immer_gpcm_prob_one_item_one_person(double theta1, Rcpp::NumericVector b_ii, double a);
RcppExport SEXP _immer_immer_gpcm_prob_one_item_one_person(SEXP theta1SEXP, SEXP b_iiSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_ii(b_iiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_gpcm_prob_one_item_one_person(theta1, b_ii, a));
    return rcpp_result_gen;
END_RCPP
}
// immer_gpcm_calc_probs
Rcpp::NumericVector immer_gpcm_calc_probs(Rcpp::NumericVector theta, Rcpp::NumericMatrix b, Rcpp::NumericVector a);
RcppExport SEXP _immer_immer_gpcm_calc_probs(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_gpcm_calc_probs(theta, b, a));
    return rcpp_result_gen;
END_RCPP
}
// immer_irt_likelihood_gpcm
Rcpp::NumericMatrix immer_irt_likelihood_gpcm(Rcpp::NumericVector probs, Rcpp::IntegerMatrix dat, Rcpp::IntegerMatrix dat_resp, int TP, int K);
RcppExport SEXP _immer_immer_irt_likelihood_gpcm(SEXP probsSEXP, SEXP datSEXP, SEXP dat_respSEXP, SEXP TPSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_irt_likelihood_gpcm(probs, dat, dat_resp, TP, K));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_prior_normal
Rcpp::NumericMatrix immer_latent_regression_prior_normal(Rcpp::NumericVector mu, Rcpp::NumericVector sigma, Rcpp::NumericVector theta);
RcppExport SEXP _immer_immer_latent_regression_prior_normal(SEXP muSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_prior_normal(mu, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_posterior
Rcpp::List immer_latent_regression_posterior(Rcpp::NumericMatrix like, Rcpp::NumericMatrix prior, Rcpp::NumericVector weights);
RcppExport SEXP _immer_immer_latent_regression_posterior(SEXP likeSEXP, SEXP priorSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_posterior(like, prior, weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_mu_sigma
Rcpp::List immer_latent_regression_calc_mu_sigma(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector beta, Rcpp::NumericVector gamma);
RcppExport SEXP _immer_immer_latent_regression_calc_mu_sigma(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_mu_sigma(X, group, G, beta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// immer_add_elements
Rcpp::NumericVector immer_add_elements(Rcpp::NumericVector x, int pos, double h);
RcppExport SEXP _immer_immer_add_elements(SEXP xSEXP, SEXP posSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_add_elements(x, pos, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_individual_likelihood
Rcpp::NumericVector immer_latent_regression_calc_individual_likelihood(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like);
RcppExport SEXP _immer_immer_latent_regression_calc_individual_likelihood(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_individual_likelihood(X, group, G, pars, theta, weights, like));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_calc_individual_likelihood_increment
Rcpp::NumericVector immer_latent_regression_calc_individual_likelihood_increment(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like, int pos1, double h1, int pos2, double h2);
RcppExport SEXP _immer_immer_latent_regression_calc_individual_likelihood_increment(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP, SEXP pos1SEXP, SEXP h1SEXP, SEXP pos2SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< int >::type pos1(pos1SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< int >::type pos2(pos2SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_calc_individual_likelihood_increment(X, group, G, pars, theta, weights, like, pos1, h1, pos2, h2));
    return rcpp_result_gen;
END_RCPP
}
// immer_latent_regression_vcov_xpd
Rcpp::NumericMatrix immer_latent_regression_vcov_xpd(Rcpp::NumericMatrix X, Rcpp::IntegerVector group, int G, Rcpp::NumericVector pars, Rcpp::NumericVector theta, Rcpp::NumericVector weights, Rcpp::NumericMatrix like, double h);
RcppExport SEXP _immer_immer_latent_regression_vcov_xpd(SEXP XSEXP, SEXP groupSEXP, SEXP GSEXP, SEXP parsSEXP, SEXP thetaSEXP, SEXP weightsSEXP, SEXP likeSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type like(likeSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_latent_regression_vcov_xpd(X, group, G, pars, theta, weights, like, h));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_prob_one_item_one_person
Rcpp::NumericVector immer_jml_prob_one_item_one_person(double theta1, Rcpp::NumericVector b_ii);
RcppExport SEXP _immer_immer_jml_prob_one_item_one_person(SEXP theta1SEXP, SEXP b_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_ii(b_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_prob_one_item_one_person(theta1, b_ii));
    return rcpp_result_gen;
END_RCPP
}
// immer_trim_increment_rcpp
double immer_trim_increment_rcpp(double incr, double max_incr);
RcppExport SEXP _immer_immer_trim_increment_rcpp(SEXP incrSEXP, SEXP max_incrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type incr(incrSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_trim_increment_rcpp(incr, max_incr));
    return rcpp_result_gen;
END_RCPP
}
// immer_abs2
double immer_abs2(double x);
RcppExport SEXP _immer_immer_abs2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_abs2(x));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_item_derivatives
Rcpp::List immer_jml_update_item_derivatives(Rcpp::NumericVector theta, Rcpp::NumericMatrix score_items, int N, int K, int I, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericMatrix b, Rcpp::NumericVector A_, Rcpp::NumericVector xsi, Rcpp::NumericVector max_incr, Rcpp::NumericMatrix b_fixed, Rcpp::NumericVector ItemScore, Rcpp::NumericVector update, Rcpp::NumericVector update_weights);
RcppExport SEXP _immer_immer_jml_update_item_derivatives(SEXP thetaSEXP, SEXP score_itemsSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP dat_respSEXP, SEXP bSEXP, SEXP A_SEXP, SEXP xsiSEXP, SEXP max_incrSEXP, SEXP b_fixedSEXP, SEXP ItemScoreSEXP, SEXP updateSEXP, SEXP update_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type score_items(score_itemsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xsi(xsiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_fixed(b_fixedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ItemScore(ItemScoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update_weights(update_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_item_derivatives(theta, score_items, N, K, I, dat_resp, b, A_, xsi, max_incr, b_fixed, ItemScore, update, update_weights));
    return rcpp_result_gen;
END_RCPP
}
// immer_jml_update_theta_derivatives
Rcpp::List immer_jml_update_theta_derivatives(Rcpp::NumericVector theta, Rcpp::NumericVector score_pers, int N, int K, int I, Rcpp::NumericMatrix b, double max_incr, Rcpp::IntegerMatrix dat_resp, Rcpp::NumericVector update);
RcppExport SEXP _immer_immer_jml_update_theta_derivatives(SEXP thetaSEXP, SEXP score_persSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP bSEXP, SEXP max_incrSEXP, SEXP dat_respSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type score_pers(score_persSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type max_incr(max_incrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(immer_jml_update_theta_derivatives(theta, score_pers, N, K, I, b, max_incr, dat_resp, update));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_immer_subimmer_sample_prob_index", (DL_FUNC) &_immer_subimmer_sample_prob_index, 2},
    {"_immer_subimmer_probs_gpcm_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_rcpp, 6},
    {"_immer_subimmer_probs_hrm_rcpp", (DL_FUNC) &_immer_subimmer_probs_hrm_rcpp, 6},
    {"_immer_subimmer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_subimmer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_sampling_xi", (DL_FUNC) &_immer_immer_sampling_xi, 12},
    {"_immer_probs_gpcm_rcpp", (DL_FUNC) &_immer_probs_gpcm_rcpp, 6},
    {"_immer_probs_hrm_rcpp", (DL_FUNC) &_immer_probs_hrm_rcpp, 6},
    {"_immer_sample_prob_index", (DL_FUNC) &_immer_sample_prob_index, 2},
    {"_immer_probs_gpcm_testlet_rcpp", (DL_FUNC) &_immer_probs_gpcm_testlet_rcpp, 7},
    {"_immer_immer_ccml_proc_freq_item_pair", (DL_FUNC) &_immer_immer_ccml_proc_freq_item_pair, 6},
    {"_immer_immer_ccml_proc_freq", (DL_FUNC) &_immer_immer_ccml_proc_freq, 4},
    {"_immer_immer_ccml_calc_item_intercepts", (DL_FUNC) &_immer_immer_ccml_calc_item_intercepts, 3},
    {"_immer_immer_ccml_probs", (DL_FUNC) &_immer_immer_ccml_probs, 7},
    {"_immer_immer_ccml_probs_from_par", (DL_FUNC) &_immer_immer_ccml_probs_from_par, 13},
    {"_immer_immer_ccml_opt_function", (DL_FUNC) &_immer_immer_ccml_opt_function, 9},
    {"_immer_immer_ccml_opt_function_par", (DL_FUNC) &_immer_immer_ccml_opt_function_par, 11},
    {"_immer_immer_ccml_gradient", (DL_FUNC) &_immer_immer_ccml_gradient, 9},
    {"_immer_immer_ccml_gradient_par", (DL_FUNC) &_immer_immer_ccml_gradient_par, 11},
    {"_immer_immer_ccml_se", (DL_FUNC) &_immer_immer_ccml_se, 12},
    {"_immer_immer_gpcm_prob_one_item_one_person", (DL_FUNC) &_immer_immer_gpcm_prob_one_item_one_person, 3},
    {"_immer_immer_gpcm_calc_probs", (DL_FUNC) &_immer_immer_gpcm_calc_probs, 3},
    {"_immer_immer_irt_likelihood_gpcm", (DL_FUNC) &_immer_immer_irt_likelihood_gpcm, 5},
    {"_immer_immer_latent_regression_prior_normal", (DL_FUNC) &_immer_immer_latent_regression_prior_normal, 3},
    {"_immer_immer_latent_regression_posterior", (DL_FUNC) &_immer_immer_latent_regression_posterior, 3},
    {"_immer_immer_latent_regression_calc_mu_sigma", (DL_FUNC) &_immer_immer_latent_regression_calc_mu_sigma, 5},
    {"_immer_immer_add_elements", (DL_FUNC) &_immer_immer_add_elements, 3},
    {"_immer_immer_latent_regression_calc_individual_likelihood", (DL_FUNC) &_immer_immer_latent_regression_calc_individual_likelihood, 7},
    {"_immer_immer_latent_regression_calc_individual_likelihood_increment", (DL_FUNC) &_immer_immer_latent_regression_calc_individual_likelihood_increment, 11},
    {"_immer_immer_latent_regression_vcov_xpd", (DL_FUNC) &_immer_immer_latent_regression_vcov_xpd, 8},
    {"_immer_immer_jml_prob_one_item_one_person", (DL_FUNC) &_immer_immer_jml_prob_one_item_one_person, 2},
    {"_immer_immer_trim_increment_rcpp", (DL_FUNC) &_immer_immer_trim_increment_rcpp, 2},
    {"_immer_immer_abs2", (DL_FUNC) &_immer_immer_abs2, 1},
    {"_immer_immer_jml_update_item_derivatives", (DL_FUNC) &_immer_immer_jml_update_item_derivatives, 14},
    {"_immer_immer_jml_update_theta_derivatives", (DL_FUNC) &_immer_immer_jml_update_theta_derivatives, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_immer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
